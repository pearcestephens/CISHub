version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: cishub
      POSTGRES_USER: cishub
      POSTGRES_PASSWORD: cishub_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - cishub-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cishub"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis for Celery broker and caching
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - cishub-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # CISHub API Server
  api:
    build:
      context: .
      target: api-server
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://cishub:cishub_password@postgres:5432/cishub
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/3
      - LOG_LEVEL=INFO
      - API_HOST=0.0.0.0
      - API_PORT=8001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cishub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health/quick"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # CISHub Dashboard
  dashboard:
    build:
      context: .
      target: dashboard-server
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://cishub:cishub_password@postgres:5432/cishub
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - DASHBOARD_HOST=0.0.0.0
      - DASHBOARD_PORT=8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - cishub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/quick"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # CISHub Worker
  worker:
    build:
      context: .
      target: worker
    environment:
      - DATABASE_URL=postgresql://cishub:cishub_password@postgres:5432/cishub
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/3
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cishub-network
    healthcheck:
      test: ["CMD", "python", "-c", "from cishub.core.worker import app; print('Worker healthy' if app.control.inspect().active() else exit(1))"]
      interval: 60s
      timeout: 30s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      replicas: 2

  # CISHub Monitor (dedicated monitoring instance)
  monitor:
    build:
      context: .
      target: monitor
    environment:
      - DATABASE_URL=postgresql://cishub:cishub_password@postgres:5432/cishub
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - QUEUE_HEALTH_CHECK_INTERVAL=15
      - ALARM_COOLDOWN_PERIOD=180
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cishub-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Celery Flower (Optional - for monitoring Celery tasks)
  flower:
    image: mher/flower:0.9.7
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/2
      - FLOWER_PORT=5555
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - cishub-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Prometheus (Optional - for metrics collection)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cishub-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana (Optional - for metrics visualization)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - cishub-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  cishub-network:
    driver: bridge