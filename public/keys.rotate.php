<?php
declare(strict_types=1);

/**
 * assets/services/queue/public/keys.rotate.php
 *
 * Rotate admin bearer or Vend webhook secret with overlap.
 * Body (JSON):
 *   target: "admin_bearer" | "vend_webhook"   (required)
 *   overlap_minutes: int (1..1440)            (default 60)
 *   new_secret: string                        (optional; autogenerated if missing)
 *   show_secret: bool                         (default false; if true, returns the new_secret in response)
 */

require_once __DIR__ . '/../src/PdoConnection.php';
require_once __DIR__ . '/../src/Config.php';
require_once __DIR__ . '/../src/Http.php';

use Queue\Config;
use Queue\Http;

Http::commonJsonHeaders();
if (!Http::ensurePost()) return;
if (!Http::ensureAuth()) return;
if (!Http::rateLimit('keys_rotate', 5)) return;

$raw = file_get_contents('php://input') ?: '';
$in  = json_decode($raw, true) ?: [];

$target   = isset($in['target']) ? (string)$in['target'] : '';
$overlap  = isset($in['overlap_minutes']) ? max(1, min(1440, (int)$in['overlap_minutes'])) : 60;
$new      = isset($in['new_secret']) ? (string)$in['new_secret'] : '';
$show     = isset($in['show_secret']) ? (bool)$in['show_secret'] : false;

if ($target === '') { Http::error('bad_request','target required (admin_bearer|vend_webhook)'); return; }

$now = time(); $exp = $now + ($overlap * 60);

try {
    if ($target === 'admin_bearer') {
        $current = (string)(Config::get('ADMIN_BEARER_TOKEN','') ?? '');
        Config::set('ADMIN_BEARER_TOKEN_PREV', $current);
        Config::set('ADMIN_BEARER_TOKEN_PREV_EXPIRES_AT', $exp);

        if ($new === '') {
            try { $new = bin2hex(random_bytes(24)); } catch (\Throwable $e) { $new = bin2hex(random_bytes(16)); }
        }
        Config::set('ADMIN_BEARER_TOKEN', $new);

        Http::respond(true, [
            'rotated'        => 'admin_bearer',
            'overlap_minutes'=> $overlap,
            'prev_expires_at'=> $exp,
            'new_secret'     => $show ? $new : null,
        ]);
        return;
    }

    if ($target === 'vend_webhook') {
        $current = (string)(Config::get('vend_webhook_secret','') ?? '');
        Config::set('vend_webhook_secret_prev', $current);
        Config::set('vend_webhook_secret_prev_expires_at', $exp);

        if ($new === '') {
            try { $new = bin2hex(random_bytes(32)); } catch (\Throwable $e) { $new = bin2hex(random_bytes(16)); }
        }
        Config::set('vend_webhook_secret', $new);

        Http::respond(true, [
            'rotated'        => 'vend_webhook',
            'overlap_minutes'=> $overlap,
            'prev_expires_at'=> $exp,
            'new_secret'     => $show ? $new : null,
        ]);
        return;
    }

    Http::error('bad_request','unknown target');
} catch (\Throwable $e) {
    Http::error('rotation_failed', $e->getMessage(), null, 500);
}
